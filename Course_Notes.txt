- Add a driver for any ORM

- To Connect to db 
    - # SQLALCHEMY_DATABASE_URL = 'postgresql://<username>:<password>@<ip-address/hostname>/<database_name>'

- To run the app
    - uvicorn app.main:app --reload => To run the app

The authentication flow using JWT tokens proceeds as follows:

    1. Client Login: The client (front-end) sends user credentials (email and password, with the password initially in plain text) to the API's login endpoint.

    2. API Verification: The API queries its database to find the user. It then hashes the attempted plain-text password from the client and compares it to the stored hashed password from the database. If they match, the credentials are valid.

    3. API Creates JWT Token: If credentials are valid, the API creates a JWT token.

    4. API Sends Token: The API sends the new JWT token back to the client.

    5. Client Stores Token: The client stores this token.

    6. Client Accesses Resources: For any subsequent requests to protected resources (e.g., retrieving posts), the client sends the JWT token in the header of the request.

    7. API Validates Token: The API verifies the token's validity, including checking its expiration time and integrity.

    8. API Provides Data: If the token is valid, the API sends back the requested data.

- The instructor highlights the simplicity of this solution, emphasizing that the API itself does not track login status; the client simply holds and provides the token.

- A JWT token is composed of three main parts:
    • Header: Contains metadata such as the signing algorithm (e.g., HS256) and the token type (JWT). This part is generally fixed and rarely changed.

    • Payload: This section holds the actual data or "claims" that the developer wants to embed. Common information includes the user's ID or role (e.g., admin, regular user). The instructor stresses that the payload is NOT encrypted, meaning anyone can view its contents. Therefore, no confidential information, like passwords or secrets, should ever be placed in the payload. Keeping the payload small is also recommended to minimize packet size.

    • Signature: This is generated by combining the header, the payload, and a secret password known only to the API server. These three components are passed into a hashing function (like HS256) to produce the signature.

- The purpose of the signature is to ensure data integrity. It allows the API to detect if the token has been tampered with or if any data within the header or payload has been altered. Without the secret password, an attacker cannot generate a new valid signature to match any altered data, thus preventing unauthorized modifications.

- JWT tokens also include an expiration time, typically embedded in the payload. This sets a limit on how long a user remains logged in, preventing indefinite sessions. The API checks this expiration time upon receiving a token to ensure it has not expired.


- SQLAlchemy doesn't track changes on the tables, if the table name exist will ignore any changes, so we need migration